#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

request = json.load(sys.stdin)

# Get configuration parameters
synapse_domain_name = request.get('synapse_domain_name', '')
element_domain_name = request.get('element_domain_name', '')

if not synapse_domain_name or not element_domain_name:
    print("ERROR: Both synapse_domain_name and element_domain_name are required", file=sys.stderr)
    sys.exit(1)

# Read current configuration
env_vars = agent.read_envfile("config.env")

# Update environment with new configuration
env_vars['SYNAPSE_DOMAIN_NAME'] = synapse_domain_name
env_vars['ELEMENT_DOMAIN_NAME'] = element_domain_name

# Get allocated TCP ports from environment - NS8 allocates sequential ports
tcp_ports = os.environ.get('TCP_PORTS', '20001').split(',')

# Assign ports to services
env_vars['DEX_PORT'] = tcp_ports[0]
env_vars['SYNAPSE_PORT'] = tcp_ports[1]
env_vars['ELEMENT_PORT'] = tcp_ports[2]
env_vars['SYGNAL_PORT'] = tcp_ports[3] # For future use

# Write updated configuration
agent.write_envfile("config.env", env_vars)

# Configure Traefik routes for Synapse Matrix server
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '-synapse',
        'url': 'http://127.0.0.1:' + env_vars['SYNAPSE_PORT'],
        'host': synapse_domain_name,
        'http2https': True,
        'lets_encrypt': True,
    },
)
agent.assert_exp(response['exit_code'] == 0)

# Configure Traefik routes for Element Web client
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '-element',
        'url': 'http://127.0.0.1:' + env_vars['ELEMENT_PORT'],
        'host': element_domain_name,
        'http2https': True,
        'lets_encrypt': True,
    },
)
agent.assert_exp(response['exit_code'] == 0)